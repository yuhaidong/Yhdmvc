<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	default-lazy-init="true">
	
	<!-- 
		此文件：		
			application-context.xml
		被文件：		
			web.xml		
		所引用。
	-->
	
	<!-- 数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="autoCommitOnClose" value="true"/>
		<property name="checkoutTimeout" value="${cpool.checkoutTimeout}"/>
		<property name="initialPoolSize" value="${cpool.minPoolSize}"/>
		<property name="minPoolSize" value="${cpool.minPoolSize}"/>
		<property name="maxPoolSize" value="${cpool.maxPoolSize}"/>
		<property name="maxIdleTime" value="${cpool.maxIdleTime}"/>
		<property name="acquireIncrement" value="${cpool.acquireIncrement}"/>
		<property name="maxIdleTimeExcessConnections" value="${cpool.maxIdleTimeExcessConnections}"/>
	</bean>
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingLocations" value="classpath:/com/yhd/yhdmvc/module/*/entity/hbm/*.hbm.xml" />
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=${hibernate.dialect}
				hibernate.show_sql=true
				hibernate.format_sql=false
				hibernate.query.substitutions=true 1, false 0
				hibernate.jdbc.batch_size=20
				hibernate.cache.use_second_level_cache=false
				hibernate.cache.use_query_cache=false
			</value>
		</property>
		<!-- 
		<property name="cacheProvider">
			<ref local="cacheProvider"/>
		</property>
		 -->
		
		<property name="entityInterceptor">
			<ref local="logEntityInterceptor"/>
		</property>
	</bean>
	
	<bean id="logEntityInterceptor" class="com.yhd.yhdmvc.common.hibernate3.LogEntityInterceptor" />

	
	<!-- <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"/> -->
	
	<!-- hibernate缓存 -->
	<!-- <bean id="cacheProvider" class="org.hibernate.cache.EhCacheProvider" /> -->
	<!-- 
	<bean id="cacheProvider" class="com.yhd.yhdblog.common.hibernate3.SpringEhCacheProvider">
		<property name="configLocation">
			<value>/WEB-INF/config/cache-ehcache-hibernate.xml</value>
		</property>
		<property name="diskStoreLocation">
			<value>/WEB-INF/config/cache</value>
		</property>
	</bean>
	 -->
		
	<!-- 数据库配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/config/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- 事务控制 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 
		"<context:annotation-config/>"这个配置用来向Spring容器注册以下4个BeanPostProcessor：
		
		1. AutowiredAnnotationBeanPostProcessor
		2. CommonAnnotationBeanPostProcessor
		3. PersistenceAnnotationBeanPostProcessor
		4. RequiredAnnotationBeanPostProcessor
		
		也就是要把这4个BeanPostProcessor对应的bean注册到容器中。
		而注册这4个BeanPostProcessor的作用是什么呢？这是为了让系统能够识别相应的注解。
		具体这4个BeanPostProcessor在识别注解上的作用如下：
		
		1.要使用：
			
			@Required
		
		这个注释，必须声明AutowiredAnnotationBeanPostProcessor的bean：	
			
			<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor "/>
	
		2.类似的，要使用：
			
			@Resource
			@PostConstruct
			@PreDestroy
		
		这些注释，必须声明CommonAnnotationBeanPostProcessor的bean。
		
		3. 要使用：
			
			@PersistenceContext
		
		这个注解，就必须声明PersistenceAnnotationBeanPostProcessor的Bean。
		
		4. 要使用：
		
			@Required
		
		这个注解，就必须声明RequiredAnnotationBeanPostProcessor的Bean。
		
		以上这些注解是很常用的，如果按照传统的方式进行配置将会非常繁琐，所以Spring给我们提供了一个简便的方式：
		
			<context:annotation-config/>
		
		使用该元素可以自动声明以上注解。
		
	 -->
	<context:annotation-config/>
	
</beans>